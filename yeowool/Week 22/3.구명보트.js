// [PGS] 구명보트 / leve2
// 난이도 :  leve2
// 풀이시간 :
// 점수 : +9

/*
문제
무인도에 갇힌 사람들을 구명보트를 이용하여 구출하려고 합니다. 구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다.

예를 들어, 사람들의 몸무게가 [70kg, 50kg, 80kg, 50kg]이고 구명보트의 무게 제한이 100kg이라면 2번째 사람과 4번째 사람은 같이 탈 수 있지만 1번째 사람과 3번째 사람의 무게의 합은 150kg이므로 구명보트의 무게 제한을 초과하여 같이 탈 수 없습니다.

구명보트를 최대한 적게 사용하여 모든 사람을 구출하려고 합니다.

사람들의 몸무게를 담은 배열 people과 구명보트의 무게 제한 limit가 매개변수로 주어질 때, 모든 사람을 구출하기 위해 필요한 구명보트 개수의 최솟값을 return 하도록 solution 함수를 작성해주세요.

제한사항
무인도에 갇힌 사람은 1명 이상 50,000명 이하입니다.
각 사람의 몸무게는 40kg 이상 240kg 이하입니다.
구명보트의 무게 제한은 40kg 이상 240kg 이하입니다.
구명보트의 무게 제한은 항상 사람들의 몸무게 중 최댓값보다 크게 주어지므로 사람들을 구출할 수 없는 경우는 없습니다.
입출력 예
people	limit	return
[70, 50, 80, 50]	100	3
[70, 80, 50]	100	3
/*


<의사코드>
 [100 60 50 51 40 30] limit=100 이라면
1. 제일 무거운 사람(left)과 제일 가벼운 사람(right)의 무게를 더했을 때, limit보다 크다면, 제일 무거운 사람만 태울 수 있다.
  => 태웠으므로 left++
2. 제일 무거운 사람과 제일 가벼운 사람의 무게를 더했을 때, limit보다 작다면, 둘 다 태울 수 있다.
  => 둘 다 태웠으므로 left++, right--
이렇게 index를 옮겨가며 검사하면 된다.
 left = 3, right = 3으로 while문을 벗어나게 된다.
하지만 한명 남았으므로, 새로운 배가 하나 더 필요하다.
그러므로 left == right인 경우 answer++해준다.
*/

function solution(people, limit) {
  var answer = 0;
  // 내림차순 정렬
  people.sort((a, b) => b - a);
  console.log(people);
  let left = 0;
  let right = people.length - 1;

  while (left < right) {
    console.log("새로운 배를 띄움");
    // 두명까지만 탈 수 있으므로...
    const sum = people[left] + people[right];
    // 무게가 넘치면 (left만 배에 태우고) 다음 사람을 검사한다.
    if (sum > limit) {
      console.log(people[left], "를 배에 태웠습니다.");
      left++;
    } else {
      // 무게가 넘치지 않으면 (둘다 태우고) 다음 사람을 검사한다.
      console.log(people[left], "와", people[right], "를 배에 태웠습니다.");
      left++;
      right--;
    }
    answer++;
  }
  // 한명 남은 경우 배 하나가 더 필요하다.
  if (left == right) answer++;
  return answer;
}

/*
 정확성  테스트
테스트 1 〉	통과 (1.91ms, 35.5MB)
테스트 2 〉	통과 (1.12ms, 33.6MB)
테스트 3 〉	통과 (1.17ms, 33.6MB)
테스트 4 〉	통과 (1.06ms, 33.6MB)
테스트 5 〉	통과 (0.69ms, 33.7MB)
테스트 6 〉	통과 (0.43ms, 33.6MB)
테스트 7 〉	통과 (0.60ms, 33.6MB)
테스트 8 〉	통과 (0.16ms, 33.5MB)
테스트 9 〉	통과 (0.20ms, 33.6MB)
테스트 10 〉	통과 (1.07ms, 33.7MB)
테스트 11 〉	통과 (0.96ms, 33.6MB)
테스트 12 〉	통과 (0.88ms, 33.5MB)
테스트 13 〉	통과 (1.10ms, 33.6MB)
테스트 14 〉	통과 (1.23ms, 33.6MB)
테스트 15 〉	통과 (0.22ms, 33.7MB)
효율성  테스트
테스트 1 〉	통과 (14.32ms, 38.2MB)
테스트 2 〉	통과 (11.65ms, 38.3MB)
테스트 3 〉	통과 (13.03ms, 38.2MB)
테스트 4 〉	통과 (11.31ms, 38.5MB)
테스트 5 〉	통과 (11.47ms, 38MB)
 */
