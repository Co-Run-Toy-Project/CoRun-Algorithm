// [PGS] 모음 사전 / leve2
// 난이도 :  leve2
// 풀이시간 :
// 점수 :

/*
문제
사전에 알파벳 모음 'A', 'E', 'I', 'O', 'U'만을 사용하여 만들 수 있는, 길이 5 이하의 모든 단어가 수록되어 있습니다. 
사전에서 첫 번째 단어는 "A"이고, 그다음은 "AA"이며, 마지막 단어는 "UUUUU"입니다.

단어 하나 word가 매개변수로 주어질 때, 이 단어가 사전에서 몇 번째 단어인지 return 하도록 solution 함수를 완성해주세요.

제한사항
word의 길이는 1 이상 5 이하입니다.
word는 알파벳 대문자 'A', 'E', 'I', 'O', 'U'로만 이루어져 있습니다.
입출력 예
word	result
"AAAAE"	6
"AAAE"	10
"I"	1563
"EIO"	1189
입출력 예 설명
입출력 예 #1

사전에서 첫 번째 단어는 "A"이고, 그다음은 "AA", "AAA", "AAAA", "AAAAA", "AAAAE", ... 와 같습니다. "AAAAE"는 사전에서 6번째 단어입니다.

입출력 예 #2

"AAAE"는 "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAE", "AAAAI", "AAAAO", "AAAAU"의 다음인 10번째 단어입니다.

입출력 예 #3

"I"는 1563번째 단어입니다.

입출력 예 #4

"EIO"는 1189번째 단어입니다.

/*
<의사코드>
 DFS 로 모든 경우의 수를 만들고, 그 중에서 word 의 인덱스를 찾아서 반환
 모든 경우의 수는 5 * 5 * 5 * 5 * 5 + 5 * 5 * 5 * 5 + 5 * 5 * 5 + 5 * 5 + 5 = 3905


*/

function solution(word) {
  const result = [];
  const str = "";
  for (let i = 1; i <= 5; i++) dfs(str, i, result);
  return result.sort().indexOf(word) + 1;
}

const dfs = (word, length, result) => {
  const vowels = [..."AEIOU"];
  if (length === word.length) {
    result.push(word);
    return;
  }
  vowels.forEach((vowel) => {
    dfs(word + vowel, length, result);
  });
};
/*
  테스트 1 〉	통과 (2.87ms, 35.2MB)
테스트 2 〉	통과 (3.29ms, 37.4MB)
테스트 3 〉	통과 (2.17ms, 37.4MB)
테스트 4 〉	통과 (5.04ms, 35.6MB)
테스트 5 〉	통과 (2.82ms, 37.4MB)
테스트 6 〉	통과 (1.96ms, 37.4MB)
테스트 7 〉	통과 (1.98ms, 37.5MB)
테스트 8 〉	통과 (2.08ms, 37.4MB)
테스트 9 〉	통과 (2.26ms, 37.4MB)
테스트 10 〉	통과 (2.92ms, 37.3MB)
테스트 11 〉	통과 (2.00ms, 37.4MB)
테스트 12 〉	통과 (1.83ms, 37.4MB)
테스트 13 〉	통과 (1.96ms, 37.4MB)
테스트 14 〉	통과 (1.93ms, 37.4MB)
테스트 15 〉	통과 (2.13ms, 37.4MB)
테스트 16 〉	통과 (1.93ms, 37.3MB)
테스트 17 〉	통과 (2.17ms, 37.3MB)
테스트 18 〉	통과 (2.44ms, 37.3MB)
테스트 19 〉	통과 (1.97ms, 37.4MB)
테스트 20 〉	통과 (1.95ms, 37.4MB)
테스트 21 〉	통과 (2.46ms, 37.3MB)
테스트 22 〉	통과 (2.97ms, 37.4MB)
테스트 23 〉	통과 (1.96ms, 37.4MB)
테스트 24 〉	통과 (1.95ms, 37.5MB)
테스트 25 〉	통과 (1.94ms, 37.3MB)
테스트 26 〉	통과 (2.14ms, 37.4MB)
테스트 27 〉	통과 (1.95ms, 37.5MB)
테스트 28 〉	통과 (2.01ms, 37.5MB)
테스트 29 〉	통과 (2.14ms, 37.4MB)
테스트 30 〉	통과 (2.19ms, 37.4MB)
테스트 31 〉	통과 (2.08ms, 37.4MB)
테스트 32 〉	통과 (3.02ms, 37.3MB)
테스트 33 〉	통과 (3.15ms, 37.3MB)
테스트 34 〉	통과 (1.94ms, 37.3MB)
테스트 35 〉	통과 (2.53ms, 37.5MB)
테스트 36 〉	통과 (1.96ms, 37.3MB)
테스트 37 〉	통과 (1.94ms, 37.5MB)
테스트 38 〉	통과 (2.12ms, 37.3MB)
테스트 39 〉	통과 (2.14ms, 37.4MB)
테스트 40 〉	통과 (3.00ms, 37.4MB)
 */

//의사코드
/*
경우의 수를 이용
1. [A, E, I, O, U] 라는 배열 만들기
2. 항상 이 순서대로 단어가 나타나므로 이 배열의 인덱스 를 활용해 몇 번째 단어인지 유추
*/

//제곱합 함수 만들기
function sumSquare(idx) {
  let sum = 0;
  for (let i = idx; i >= 0; i -= 1) {
    sum += 5 ** i;
  }
  return sum;
}

function solution(word) {
  let answer = 0;
  const aeiou = { A: 0, E: 1, I: 2, O: 3, U: 4 };

  [...word].forEach((w, idx) => {
    const val = aeiou[w];
    answer += val * sumSquare(4 - idx) + 1;
  });

  return answer;
}

/*
테스트 1 〉	통과 (0.12ms, 33.4MB)
테스트 2 〉	통과 (0.15ms, 33.5MB)
테스트 3 〉	통과 (0.08ms, 33.4MB)
테스트 4 〉	통과 (0.08ms, 33.4MB)
테스트 5 〉	통과 (0.13ms, 33.6MB)
테스트 6 〉	통과 (0.08ms, 33.4MB)
테스트 7 〉	통과 (0.11ms, 33.6MB)
테스트 8 〉	통과 (0.13ms, 33.4MB)
테스트 9 〉	통과 (0.12ms, 33.5MB)
테스트 10 〉	통과 (0.11ms, 33.5MB)
테스트 11 〉	통과 (0.12ms, 33.4MB)
테스트 12 〉	통과 (0.10ms, 33.5MB)
테스트 13 〉	통과 (0.12ms, 33.5MB)
테스트 14 〉	통과 (0.11ms, 33.5MB)
테스트 15 〉	통과 (0.08ms, 33.4MB)
테스트 16 〉	통과 (0.14ms, 33.5MB)
테스트 17 〉	통과 (0.08ms, 33.6MB)
테스트 18 〉	통과 (0.08ms, 33.4MB)
테스트 19 〉	통과 (0.08ms, 33.4MB)
테스트 20 〉	통과 (0.08ms, 33.6MB)
테스트 21 〉	통과 (0.08ms, 33.5MB)
테스트 22 〉	통과 (0.08ms, 33.4MB)
테스트 23 〉	통과 (0.10ms, 33.4MB)
테스트 24 〉	통과 (0.11ms, 33.5MB)
테스트 25 〉	통과 (0.09ms, 33.5MB)
테스트 26 〉	통과 (0.11ms, 33.5MB)
테스트 27 〉	통과 (0.08ms, 33.4MB)
테스트 28 〉	통과 (0.08ms, 33.4MB)
테스트 29 〉	통과 (0.12ms, 33.4MB)
테스트 30 〉	통과 (0.08ms, 33.4MB)
테스트 31 〉	통과 (0.11ms, 33.5MB)
테스트 32 〉	통과 (0.12ms, 33.5MB)
테스트 33 〉	통과 (0.08ms, 33.4MB)
테스트 34 〉	통과 (0.08ms, 33.5MB)
테스트 35 〉	통과 (0.12ms, 33.5MB)
테스트 36 〉	통과 (0.14ms, 33.5MB)
테스트 37 〉	통과 (0.13ms, 33.4MB)
테스트 38 〉	통과 (0.20ms, 33.6MB)
테스트 39 〉	통과 (0.08ms, 33.5MB)
테스트 40 〉	통과 (0.08ms, 33.4MB)
*/
