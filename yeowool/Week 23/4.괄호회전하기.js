// [PGS] 괄호 회전하기 / leve2
// 난이도 :  leve2
// 풀이시간 :
// 점수 :

/*
문제
다음 규칙을 지키는 문자열을 올바른 괄호 문자열이라고 정의합니다.

(), [], {} 는 모두 올바른 괄호 문자열입니다.
만약 A가 올바른 괄호 문자열이라면, (A), [A], {A} 도 올바른 괄호 문자열입니다. 예를 들어, [] 가 올바른 괄호 문자열이므로, ([]) 도 올바른 괄호 문자열입니다.
만약 A, B가 올바른 괄호 문자열이라면, AB 도 올바른 괄호 문자열입니다. 예를 들어, {} 와 ([]) 가 올바른 괄호 문자열이므로, {}([]) 도 올바른 괄호 문자열입니다.
대괄호, 중괄호, 그리고 소괄호로 이루어진 문자열 s가 매개변수로 주어집니다. 이 s를 왼쪽으로 x (0 ≤ x < (s의 길이)) 칸만큼 회전시켰을 때 s가 올바른 괄호 문자열이 되게 하는 x의 개수를 return 하도록 solution 함수를 완성해주세요.

제한사항
s의 길이는 1 이상 1,000 이하입니다.
입출력 예
s	result
"[](){}"	3
"}]()[{"	2
"[)(]"	0
"}}}"	0
입출력 예 설명
입출력 예 #1

다음 표는 "[](){}" 를 회전시킨 모습을 나타낸 것입니다.
x	s를 왼쪽으로 x칸만큼 회전	올바른 괄호 문자열?
0	"[](){}"	O
1	"](){}["	X
2	"(){}[]"	O
3	"){}[]("	X
4	"{}[]()"	O
5	"}[](){"	X
올바른 괄호 문자열이 되는 x가 3개이므로, 3을 return 해야 합니다.
입출력 예 #2

다음 표는 "}]()[{" 를 회전시킨 모습을 나타낸 것입니다.
x	s를 왼쪽으로 x칸만큼 회전	올바른 괄호 문자열?
0	"}]()[{"	X
1	"]()[{}"	X
2	"()[{}]"	O
3	")[{}]("	X
4	"[{}]()"	O
5	"{}]()["	X
올바른 괄호 문자열이 되는 x가 2개이므로, 2를 return 해야 합니다.
입출력 예 #3

s를 어떻게 회전하더라도 올바른 괄호 문자열을 만들 수 없으므로, 0을 return 해야 합니다.
입출력 예 #4

s를 어떻게 회전하더라도 올바른 괄호 문자열을 만들 수 없으므로, 0을 return 해야 합니다.

/*
<의사코드>
문자열 형태의 괄호배열이 주어진다
길이만큼 왼쪽으로 하나씩 돌건데, 그 때마다 올바른 괄오인지 아닌지 count하는 문제

스택으로 쌓으면서 확인 하면 되지 않을까!
홀수는 무조건 짝이 될 수 없으므로 if문으로 거르기

stak으로 쌓은 배열을 다시 result라는 배열로 감싸서 2중 배열로 만든 후
result를 돌면서 앞의 괄호와 뒤의 괄호를 보고 count를 올려준다.
*/

function solution(s) {
  let stak = [];
  let result = [];
  let count = 0;
  // if (s.length % 2 !== 0) count = 0;

  for (let i = 0; i < s.length; i++) {
    let newS = s.slice(i) + s.slice(0, i);
    for (let j = 0; j < newS.length; j++) {
      stak.push(newS[j]);
    }
    result.push(stak);
    stak = [];
  }
  console.log(result);
  let len = result.length - 1;
  for (let i = 0; i < result.length; i++) {
    if (result[i][0] === "{" || result[i][0] === "(" || result[i][0] === "[") {
      if (
        result[i][len] === "}" ||
        result[i][len] === ")" ||
        result[i][len] === "]"
      ) {
        count++;
      }
    }
  }

  return count;
}

/*
 
테스트 1
입력값 〉	"[](){}"
기댓값 〉	3
실행 결과 〉	테스트를 통과하였습니다.
출력 〉	[
  [ '[', ']', '(', ')', '{', '}' ],
  [ ']', '(', ')', '{', '}', '[' ],
  [ '(', ')', '{', '}', '[', ']' ],
  [ ')', '{', '}', '[', ']', '(' ],
  [ '{', '}', '[', ']', '(', ')' ],
  [ '}', '[', ']', '(', ')', '{' ]
]
테스트 2
입력값 〉	"}]()[{"
기댓값 〉	2
실행 결과 〉	테스트를 통과하였습니다.
출력 〉	[
  [ '}', ']', '(', ')', '[', '{' ],
  [ ']', '(', ')', '[', '{', '}' ],
  [ '(', ')', '[', '{', '}', ']' ],
  [ ')', '[', '{', '}', ']', '(' ],
  [ '[', '{', '}', ']', '(', ')' ],
  [ '{', '}', ']', '(', ')', '[' ]
]
테스트 3
입력값 〉	"[)(]"
기댓값 〉	0
실행 결과 〉	실행한 결괏값 2이 기댓값 0과 다릅니다.
출력 〉	[
  [ '[', ')', '(', ']' ],
  [ ')', '(', ']', '[' ],
  [ '(', ']', '[', ')' ],
  [ ']', '[', ')', '(' ]
]
테스트 4
입력값 〉	"}}}"
기댓값 〉	0
실행 결과 〉	테스트를 통과하였습니다.
출력 〉	[ [ '}', '}', '}' ], [ '}', '}', '}' ], [ '}', '}', '}' ] ]
 */
