// [PGS] 마법의 엘리베이터 / leve2
// 난이도 :  leve2
// 풀이시간 :
// 점수 :

/*
문제
마법의 세계에 사는 민수는 아주 높은 탑에 살고 있습니다. 탑이 너무 높아서 걸어 다니기 힘든 민수는 마법의 엘리베이터를 만들었습니다. 마법의 엘리베이터의 버튼은 특별합니다. 마법의 엘리베이터에는 -1, +1, -10, +10, -100, +100 등과 같이 절댓값이 10c (c ≥ 0 인 정수) 형태인 정수들이 적힌 버튼이 있습니다. 마법의 엘리베이터의 버튼을 누르면 현재 층 수에 버튼에 적혀 있는 값을 더한 층으로 이동하게 됩니다. 단, 엘리베이터가 위치해 있는 층과 버튼의 값을 더한 결과가 0보다 작으면 엘리베이터는 움직이지 않습니다. 민수의 세계에서는 0층이 가장 아래층이며 엘리베이터는 현재 민수가 있는 층에 있습니다.

마법의 엘리베이터를 움직이기 위해서 버튼 한 번당 마법의 돌 한 개를 사용하게 됩니다.예를 들어, 16층에 있는 민수가 0층으로 가려면 -1이 적힌 버튼을 6번, -10이 적힌 버튼을 1번 눌러 마법의 돌 7개를 소모하여 0층으로 갈 수 있습니다. 하지만, +1이 적힌 버튼을 4번, -10이 적힌 버튼 2번을 누르면 마법의 돌 6개를 소모하여 0층으로 갈 수 있습니다.

마법의 돌을 아끼기 위해 민수는 항상 최소한의 버튼을 눌러서 이동하려고 합니다. 민수가 어떤 층에서 엘리베이터를 타고 0층으로 내려가는데 필요한 마법의 돌의 최소 개수를 알고 싶습니다. 민수와 마법의 엘리베이터가 있는 층을 나타내는 정수 storey 가 주어졌을 때, 0층으로 가기 위해 필요한 마법의 돌의 최소값을 return 하도록 solution 함수를 완성하세요.

제한사항
1 ≤ storey ≤ 100,000,000

입출력 예
storey	result
16	6
2554	16

입출력 예 설명
입출력 예 #1

문제 예시와 같습니다.
입출력 예 #2

-1, +100이 적힌 버튼을 4번, 
+10이 적힌 버튼을 5번, -1000이 적힌 버튼을 3번 누르면 0층에 도착 할 수 있습니다. 
그러므로 16을 return 합니다.
*/

/*
<의사코드>
민수는 높은 탑에 살고있음
마법의 엘리베이터 만들음
 -1, +1, -10, +10, -100, +100 등과 같이 
 절댓값이 10c (c ≥ 0 인 정수) 형태인 정수들이 적힌 버튼
 버튼을 누르면 현재 층 수에 버튼에 적혀 있는 값을 더한 층으로 이동
 . 단, 엘리베이터가 위치해 있는 층과 버튼의 값을 더한 결과가 0보다 작으면 엘리베이터는 움직이지 않음
 . 민수의 세계에서는 0층이 가장 아래층이며 엘리베이터는 현재 민수가 있는 층에 있다.
  버튼 한 번당 마법의 돌 한 개를 사용
  마법의 돌을 아끼기 위해 민수는 항상 최소한의 버튼을 눌러서 이동

  이동 시 들어가는 최소 마법돌 구하기
storey 현재 층수에서 0층으로 이동하기에 최소 마법돌


첫 접근을 BFS로 하게되면 

{-1,1,-10,10,-100,100 ......}
위와 같이 -1억 ~ 1억까지 배열을 만든 뒤 BFS를 돌려야 하므로 18의 제곱이 반복되어 시간초과가 난다.
그렇기 때문에 그리디를 사용해 횟수를 최소화 해야한다.

맨 뒷자리부터 시작해 6 이상이면 올린 뒤 앞자리에 1을 더하고 4 이하면 내려준다.
이 때 5일 경우를 잘 생각해야한다. 예시를 들어보자

storey 가 465 일 경우 뒤에서 맨 뒷자리가 5 이므로 두가지 경우의 수가 생긴다.
1. 0로 내려가는 경우으
2. 10으로 올라가는 경우

1번을 선택하면
460 , answer = 5
400, answer = 11
000, answer = 15 

2번을 선택하면
470, answer = 5
500, answer = 8
000, answer = 13

맨 뒷자리가 5일때는 뒤에서 두번째 자리 수가 6 이상일 때 최소 횟수로 다가간다.
만약 맨 뒷자리도 5이고 뒤에서 두번째 자리도 5라면 어떻게될까??
storey가 455 일 경우

1번을 선택하면
450 , answer = 5
400, answer = 10
000, answer = 14 

2번을 선택하면
460, answer = 5
500, answer = 9
000, answer = 14 

같은 횟수를 가지므로 코드 작성시 
두번째 자리 수가 5 이상일 경우 올림, 5 미만일 경우 내림을 하면 된다.

*/
function solution(storey) {
  let answer = 0;

  while (storey != 0) {
    let n = storey % 10;
    if (n > 5) {
      answer += 10 - n;
      storey = storey / 10;
      storey = storey + 1;
      Math.ceil(answer);
    } else if (n == 5) {
      let tmp = (storey / 10) % 10;
      if (tmp >= 5) {
        storey = storey / 10;
        storey = storey + 1;
      } else {
        storey = storey / 10;
      }
      answer = answer + 5;
    } else {
      answer = answer + n;
      storey = storey / 10;
      Math.floor(answer);
    }
  }
  return answer;
}

/*

테스트 1
입력값 〉	16
기댓값 〉	6
실행 결과 〉	실행한 결괏값 6.888888888888888이 기댓값 6과 다릅니다.
테스트 2
입력값 〉	2554
기댓값 〉	16
실행 결과 〉	실행한 결괏값 16.119999999999997이 기댓값 16과 다릅니다.
 */
